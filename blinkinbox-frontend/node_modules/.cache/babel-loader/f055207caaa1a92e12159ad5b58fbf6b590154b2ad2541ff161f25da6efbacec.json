{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\nexport const useEmailService = () => {\n  _s();\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const generateEmail = useCallback(() => {\n    let email;\n    if (emailPrefix.trim()) {\n      // If user provided a prefix, still add randomization\n      const prefix = emailPrefix.trim();\n      const timestamp = Date.now() % 10000; // Last 4 digits of current timestamp\n      const randomNumber = Math.floor(Math.random() * 10000); // Random 4-digit number\n      email = `${prefix}${timestamp}${randomNumber}@blinkinbox.club`;\n    } else {\n      // Otherwise use the fully random email\n      email = generateRandomEmail();\n    }\n    setGeneratedEmail(email);\n\n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username).catch(error => console.error('Error creating email:', error));\n  }, [emailPrefix]);\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    navigator.clipboard.writeText(generatedEmail).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }).catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    setLoading(true);\n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n\n      // Add debugging logs\n      console.log('API response:', data);\n      console.log('Emails in response:', data.emails);\n      setEmails(data.emails || []); // Ensure we're getting the emails array from the response\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n\n    // Initial fetch\n    refreshInbox();\n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox\n  };\n};\n_s(useEmailService, \"WsXyetVyjDgg4tiunjNynVuYoDA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","createEmail","getEmails","generateRandomEmail","useEmailService","_s","emailPrefix","setEmailPrefix","generatedEmail","setGeneratedEmail","emails","setEmails","loading","setLoading","copied","setCopied","generateEmail","email","trim","prefix","timestamp","Date","now","randomNumber","Math","floor","random","username","split","catch","error","console","copyEmail","navigator","clipboard","writeText","then","setTimeout","err","refreshInbox","data","log","interval","setInterval","clearInterval"],"sources":["/Users/georgieeee/Documents/projects/blinkinbox/blinkinbox-frontend/src/hooks/useEmailService.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\n\nexport const useEmailService = () => {\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  const generateEmail = useCallback(() => {\n    let email;\n    \n    if (emailPrefix.trim()) {\n      // If user provided a prefix, still add randomization\n      const prefix = emailPrefix.trim();\n      const timestamp = Date.now() % 10000; // Last 4 digits of current timestamp\n      const randomNumber = Math.floor(Math.random() * 10000); // Random 4-digit number\n      email = `${prefix}${timestamp}${randomNumber}@blinkinbox.club`;\n    } else {\n      // Otherwise use the fully random email\n      email = generateRandomEmail();\n    }\n    \n    setGeneratedEmail(email);\n    \n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username)\n      .catch(error => console.error('Error creating email:', error));\n      \n  }, [emailPrefix]);\n\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    \n    navigator.clipboard.writeText(generatedEmail)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    \n    setLoading(true);\n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n\n      // Add debugging logs\n      console.log('API response:', data);\n      console.log('Emails in response:', data.emails);\n\n      setEmails(data.emails || []); // Ensure we're getting the emails array from the response\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n    \n    // Initial fetch\n    refreshInbox();\n    \n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}