{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\nexport const useEmailService = () => {\n  _s();\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const generateEmail = useCallback(() => {\n    const email = emailPrefix.trim() ? `${emailPrefix}@blinkinbox.club` : generateRandomEmail();\n    setGeneratedEmail(email);\n\n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username).catch(error => console.error('Error creating email:', error));\n  }, [emailPrefix]);\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    navigator.clipboard.writeText(generatedEmail).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }).catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    setLoading(true);\n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n      setEmails(data);\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n\n    // Initial fetch\n    refreshInbox();\n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox\n  };\n};\n_s(useEmailService, \"WsXyetVyjDgg4tiunjNynVuYoDA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","createEmail","getEmails","generateRandomEmail","useEmailService","_s","emailPrefix","setEmailPrefix","generatedEmail","setGeneratedEmail","emails","setEmails","loading","setLoading","copied","setCopied","generateEmail","email","trim","username","split","catch","error","console","copyEmail","navigator","clipboard","writeText","then","setTimeout","err","refreshInbox","data","interval","setInterval","clearInterval"],"sources":["/Users/georgieeee/Documents/projects/blinkinbox/blinkinbox-frontend/src/hooks/useEmailService.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\n\nexport const useEmailService = () => {\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  const generateEmail = useCallback(() => {\n    const email = emailPrefix.trim() \n      ? `${emailPrefix}@blinkinbox.club` \n      : generateRandomEmail();\n    \n    setGeneratedEmail(email);\n    \n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username)\n      .catch(error => console.error('Error creating email:', error));\n      \n  }, [emailPrefix]);\n\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    \n    navigator.clipboard.writeText(generatedEmail)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    \n    setLoading(true);\n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n      setEmails(data);\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n    \n    // Initial fetch\n    refreshInbox();\n    \n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}