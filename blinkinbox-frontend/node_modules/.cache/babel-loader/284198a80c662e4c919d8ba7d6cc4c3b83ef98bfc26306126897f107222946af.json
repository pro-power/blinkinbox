{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{createEmail,getEmails}from'../services/api';import{generateRandomEmail}from'../utils/helpers';export const useEmailService=()=>{const[emailPrefix,setEmailPrefix]=useState('');const[generatedEmail,setGeneratedEmail]=useState('');const[emails,setEmails]=useState([]);const[loading,setLoading]=useState(false);const[copied,setCopied]=useState(false);const generateEmail=useCallback(()=>{const email=emailPrefix.trim()?`${emailPrefix}@blinkinbox.club`:generateRandomEmail();setGeneratedEmail(email);// Create the email on the server\nconst username=email.split('@')[0];createEmail(username).catch(error=>console.error('Error creating email:',error));},[emailPrefix]);const copyEmail=useCallback(()=>{if(!generatedEmail)return;navigator.clipboard.writeText(generatedEmail).then(()=>{setCopied(true);setTimeout(()=>setCopied(false),2000);}).catch(err=>console.error('Could not copy text:',err));},[generatedEmail]);const refreshInbox=useCallback(async()=>{if(!generatedEmail)return;setLoading(true);try{const username=generatedEmail.split('@')[0];const data=await getEmails(username);setEmails(data);}catch(error){console.error('Error fetching emails:',error);}finally{setLoading(false);}},[generatedEmail]);// Auto-refresh inbox every 30 seconds if we have a generated email\nuseEffect(()=>{if(!generatedEmail)return;// Initial fetch\nrefreshInbox();const interval=setInterval(refreshInbox,30000);return()=>clearInterval(interval);},[generatedEmail,refreshInbox]);return{emailPrefix,setEmailPrefix,generatedEmail,generateEmail,copyEmail,copied,emails,loading,refreshInbox};};","map":{"version":3,"names":["useState","useEffect","useCallback","createEmail","getEmails","generateRandomEmail","useEmailService","emailPrefix","setEmailPrefix","generatedEmail","setGeneratedEmail","emails","setEmails","loading","setLoading","copied","setCopied","generateEmail","email","trim","username","split","catch","error","console","copyEmail","navigator","clipboard","writeText","then","setTimeout","err","refreshInbox","data","interval","setInterval","clearInterval"],"sources":["/Users/georgieeee/Documents/projects/blinkinbox/blinkinbox-frontend/src/hooks/useEmailService.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\n\nexport const useEmailService = () => {\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  const generateEmail = useCallback(() => {\n    const email = emailPrefix.trim() \n      ? `${emailPrefix}@blinkinbox.club` \n      : generateRandomEmail();\n    \n    setGeneratedEmail(email);\n    \n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username)\n      .catch(error => console.error('Error creating email:', error));\n      \n  }, [emailPrefix]);\n\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    \n    navigator.clipboard.writeText(generatedEmail)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    \n    setLoading(true);\n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n      setEmails(data);\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n    \n    // Initial fetch\n    refreshInbox();\n    \n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}