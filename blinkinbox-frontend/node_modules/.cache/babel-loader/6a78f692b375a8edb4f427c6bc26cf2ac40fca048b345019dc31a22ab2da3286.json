{"ast":null,"code":"export const generateRandomEmail = () => {\n  const prefix = 'user' + Math.floor(Math.random() * 10000);\n  return `${prefix}@tempmail.com`;\n};\nexport const formatEmailTime = date => {\n  const now = new Date();\n  const messageDate = new Date(date);\n  const diff = now - messageDate;\n\n  // Less than a minute\n  if (diff < 60 * 1000) {\n    return 'Just now';\n  }\n\n  // Less than an hour\n  if (diff < 60 * 60 * 1000) {\n    const minutes = Math.floor(diff / (60 * 1000));\n    return `${minutes} min ago`;\n  }\n\n  // Today\n  if (messageDate.toDateString() === now.toDateString()) {\n    return messageDate.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  // Yesterday\n  const yesterday = new Date(now);\n  yesterday.setDate(yesterday.getDate() - 1);\n  if (messageDate.toDateString() === yesterday.toDateString()) {\n    return 'Yesterday';\n  }\n\n  // Within a week\n  if (diff < 7 * 24 * 60 * 60 * 1000) {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return days[messageDate.getDay()];\n  }\n\n  // Older\n  return messageDate.toLocaleDateString();\n};","map":{"version":3,"names":["generateRandomEmail","prefix","Math","floor","random","formatEmailTime","date","now","Date","messageDate","diff","minutes","toDateString","toLocaleTimeString","hour","minute","yesterday","setDate","getDate","days","getDay","toLocaleDateString"],"sources":["/Users/georgieeee/Documents/projects/blinkinbox/blinkinbox-frontend/src/utils/helpers.js"],"sourcesContent":["export const generateRandomEmail = () => {\n    const prefix = 'user' + Math.floor(Math.random() * 10000);\n    return `${prefix}@tempmail.com`;\n  };\n  \n  export const formatEmailTime = (date) => {\n    const now = new Date();\n    const messageDate = new Date(date);\n    const diff = now - messageDate;\n    \n    // Less than a minute\n    if (diff < 60 * 1000) {\n      return 'Just now';\n    }\n    \n    // Less than an hour\n    if (diff < 60 * 60 * 1000) {\n      const minutes = Math.floor(diff / (60 * 1000));\n      return `${minutes} min ago`;\n    }\n    \n    // Today\n    if (messageDate.toDateString() === now.toDateString()) {\n      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    }\n    \n    // Yesterday\n    const yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    if (messageDate.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    }\n    \n    // Within a week\n    if (diff < 7 * 24 * 60 * 60 * 1000) {\n      const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      return days[messageDate.getDay()];\n    }\n    \n    // Older\n    return messageDate.toLocaleDateString();\n  };"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;EACrC,MAAMC,MAAM,GAAG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;EACzD,OAAO,GAAGH,MAAM,eAAe;AACjC,CAAC;AAED,OAAO,MAAMI,eAAe,GAAIC,IAAI,IAAK;EACvC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,IAAID,IAAI,CAACF,IAAI,CAAC;EAClC,MAAMI,IAAI,GAAGH,GAAG,GAAGE,WAAW;;EAE9B;EACA,IAAIC,IAAI,GAAG,EAAE,GAAG,IAAI,EAAE;IACpB,OAAO,UAAU;EACnB;;EAEA;EACA,IAAIA,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;IACzB,MAAMC,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACO,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IAC9C,OAAO,GAAGC,OAAO,UAAU;EAC7B;;EAEA;EACA,IAAIF,WAAW,CAACG,YAAY,CAAC,CAAC,KAAKL,GAAG,CAACK,YAAY,CAAC,CAAC,EAAE;IACrD,OAAOH,WAAW,CAACI,kBAAkB,CAAC,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAU,CAAC,CAAC;EACnF;;EAEA;EACA,MAAMC,SAAS,GAAG,IAAIR,IAAI,CAACD,GAAG,CAAC;EAC/BS,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1C,IAAIT,WAAW,CAACG,YAAY,CAAC,CAAC,KAAKI,SAAS,CAACJ,YAAY,CAAC,CAAC,EAAE;IAC3D,OAAO,WAAW;EACpB;;EAEA;EACA,IAAIF,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;IAClC,MAAMS,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC9D,OAAOA,IAAI,CAACV,WAAW,CAACW,MAAM,CAAC,CAAC,CAAC;EACnC;;EAEA;EACA,OAAOX,WAAW,CAACY,kBAAkB,CAAC,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}