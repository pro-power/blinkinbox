{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\n\n// Key for localStorage\nconst STORAGE_KEY = 'blinkinbox_email';\nconst EMAIL_EXPIRY_KEY = 'blinkinbox_email_expiry';\nconst EXPIRY_TIME = 30 * 60 * 1000; // 30 minutes in milliseconds\n\nexport const useEmailService = () => {\n  _s();\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize from localStorage on component mount\n  useEffect(() => {\n    const storedEmail = localStorage.getItem(STORAGE_KEY);\n    const expiryTime = localStorage.getItem(EMAIL_EXPIRY_KEY);\n    if (storedEmail && expiryTime) {\n      const now = Date.now();\n      if (now < parseInt(expiryTime)) {\n        setGeneratedEmail(storedEmail);\n        // If there's a stored email, update the prefix for consistency\n        const prefix = storedEmail.split('@')[0].replace(/\\d+$/, ''); // Remove trailing numbers\n        setEmailPrefix(prefix);\n      } else {\n        // Clear expired email\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.removeItem(EMAIL_EXPIRY_KEY);\n      }\n    }\n  }, []);\n  const generateEmail = useCallback(() => {\n    let email;\n    if (emailPrefix.trim()) {\n      // If user provided a prefix, still add randomization\n      const prefix = emailPrefix.trim();\n      const timestamp = Date.now() % 10000; // Last 4 digits of current timestamp\n      const randomNumber = Math.floor(Math.random() * 10000); // Random 4-digit number\n      email = `${prefix}${timestamp}${randomNumber}@blinkinbox.club`;\n    } else {\n      // Otherwise use the fully random email\n      email = generateRandomEmail();\n    }\n    setGeneratedEmail(email);\n\n    // Store in localStorage with expiry time\n    localStorage.setItem(STORAGE_KEY, email);\n    localStorage.setItem(EMAIL_EXPIRY_KEY, String(Date.now() + EXPIRY_TIME));\n\n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username).catch(error => {\n      console.error('Error creating email:', error);\n      setError('Failed to create email address. Please try again.');\n    });\n  }, [emailPrefix]);\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    navigator.clipboard.writeText(generatedEmail).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }).catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n      setEmails(data.emails || []);\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n      setError('Failed to fetch emails. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n\n    // Initial fetch\n    refreshInbox();\n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n\n  // Reset email when it expires\n  useEffect(() => {\n    const checkExpiry = () => {\n      const expiryTime = localStorage.getItem(EMAIL_EXPIRY_KEY);\n      if (expiryTime && Date.now() > parseInt(expiryTime)) {\n        setGeneratedEmail('');\n        setEmails([]);\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.removeItem(EMAIL_EXPIRY_KEY);\n      }\n    };\n    const interval = setInterval(checkExpiry, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox,\n    error\n  };\n};\n_s(useEmailService, \"kB0HX4g2qAQNaiNEpDWuIp2aW/E=\");","map":{"version":3,"names":["useState","useEffect","useCallback","createEmail","getEmails","generateRandomEmail","STORAGE_KEY","EMAIL_EXPIRY_KEY","EXPIRY_TIME","useEmailService","_s","emailPrefix","setEmailPrefix","generatedEmail","setGeneratedEmail","emails","setEmails","loading","setLoading","copied","setCopied","error","setError","storedEmail","localStorage","getItem","expiryTime","now","Date","parseInt","prefix","split","replace","removeItem","generateEmail","email","trim","timestamp","randomNumber","Math","floor","random","setItem","String","username","catch","console","copyEmail","navigator","clipboard","writeText","then","setTimeout","err","refreshInbox","data","interval","setInterval","clearInterval","checkExpiry"],"sources":["/Users/georgieeee/Documents/projects/blinkinbox/blinkinbox-frontend/src/hooks/useEmailService.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { createEmail, getEmails } from '../services/api';\nimport { generateRandomEmail } from '../utils/helpers';\n\n// Key for localStorage\nconst STORAGE_KEY = 'blinkinbox_email';\nconst EMAIL_EXPIRY_KEY = 'blinkinbox_email_expiry';\nconst EXPIRY_TIME = 30 * 60 * 1000; // 30 minutes in milliseconds\n\nexport const useEmailService = () => {\n  const [emailPrefix, setEmailPrefix] = useState('');\n  const [generatedEmail, setGeneratedEmail] = useState('');\n  const [emails, setEmails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize from localStorage on component mount\n  useEffect(() => {\n    const storedEmail = localStorage.getItem(STORAGE_KEY);\n    const expiryTime = localStorage.getItem(EMAIL_EXPIRY_KEY);\n    \n    if (storedEmail && expiryTime) {\n      const now = Date.now();\n      if (now < parseInt(expiryTime)) {\n        setGeneratedEmail(storedEmail);\n        // If there's a stored email, update the prefix for consistency\n        const prefix = storedEmail.split('@')[0].replace(/\\d+$/, ''); // Remove trailing numbers\n        setEmailPrefix(prefix);\n      } else {\n        // Clear expired email\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.removeItem(EMAIL_EXPIRY_KEY);\n      }\n    }\n  }, []);\n\n  const generateEmail = useCallback(() => {\n    let email;\n    \n    if (emailPrefix.trim()) {\n      // If user provided a prefix, still add randomization\n      const prefix = emailPrefix.trim();\n      const timestamp = Date.now() % 10000; // Last 4 digits of current timestamp\n      const randomNumber = Math.floor(Math.random() * 10000); // Random 4-digit number\n      email = `${prefix}${timestamp}${randomNumber}@blinkinbox.club`;\n    } else {\n      // Otherwise use the fully random email\n      email = generateRandomEmail();\n    }\n    \n    setGeneratedEmail(email);\n    \n    // Store in localStorage with expiry time\n    localStorage.setItem(STORAGE_KEY, email);\n    localStorage.setItem(EMAIL_EXPIRY_KEY, String(Date.now() + EXPIRY_TIME));\n    \n    // Create the email on the server\n    const username = email.split('@')[0];\n    createEmail(username)\n      .catch(error => {\n        console.error('Error creating email:', error);\n        setError('Failed to create email address. Please try again.');\n      });\n      \n  }, [emailPrefix]);\n\n  const copyEmail = useCallback(() => {\n    if (!generatedEmail) return;\n    \n    navigator.clipboard.writeText(generatedEmail)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Could not copy text:', err));\n  }, [generatedEmail]);\n\n  const refreshInbox = useCallback(async () => {\n    if (!generatedEmail) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const username = generatedEmail.split('@')[0];\n      const data = await getEmails(username);\n      setEmails(data.emails || []);\n    } catch (error) {\n      console.error('Error fetching emails:', error);\n      setError('Failed to fetch emails. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, [generatedEmail]);\n\n  // Auto-refresh inbox every 30 seconds if we have a generated email\n  useEffect(() => {\n    if (!generatedEmail) return;\n    \n    // Initial fetch\n    refreshInbox();\n    \n    const interval = setInterval(refreshInbox, 30000);\n    return () => clearInterval(interval);\n  }, [generatedEmail, refreshInbox]);\n\n  // Reset email when it expires\n  useEffect(() => {\n    const checkExpiry = () => {\n      const expiryTime = localStorage.getItem(EMAIL_EXPIRY_KEY);\n      if (expiryTime && Date.now() > parseInt(expiryTime)) {\n        setGeneratedEmail('');\n        setEmails([]);\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.removeItem(EMAIL_EXPIRY_KEY);\n      }\n    };\n    \n    const interval = setInterval(checkExpiry, 60000); // Check every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    emailPrefix,\n    setEmailPrefix,\n    generatedEmail,\n    generateEmail,\n    copyEmail,\n    copied,\n    emails,\n    loading,\n    refreshInbox,\n    error\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}